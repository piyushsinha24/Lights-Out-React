{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","restart","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","board2","JSON","stringify","isSolvable","boardt","parse","toggle","flip","possibleLastRows","i","length","toString","coord","console","log","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","makeTable","defaultProps","App","document","getElementById","scrollIntoView","style","display","showGamePlay","showTutorial","src_Board_0","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAuBeA,qBAnBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFFA,2EAKPU,GAEVP,KAAKJ,MAAMY,qDAIX,IAAIC,EAAU,QAAUT,KAAKJ,MAAMc,MAAQ,YAAc,IAEzD,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAASM,QAASf,KAAKI,qBAf3BY,cCCbC,qBAQJ,SAAAA,EAAYrB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACjBpB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,KAAAH,KAAMJ,KAGDsB,MAAQ,CACXC,QAAQ,EACRC,MAAOvB,EAAKwB,eAEdxB,EAAKyB,QAAUzB,EAAKyB,QAAQjB,KAAbP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAREA,6EAgBjB,IAFA,IAAIuB,EAAQ,GAEJG,EAAI,EAAGA,EAAIvB,KAAKJ,MAAM4B,MAAOD,IAAI,CAEvC,IADA,IAAIE,EAAM,GACFC,EAAI,EAAGA,EAAI1B,KAAKJ,MAAM+B,MAAOD,IACnCD,EAAIG,KAAKC,KAAKC,SAAW9B,KAAKJ,MAAMmC,qBAEtCX,EAAMQ,KAAKH,GAEb,IAAIO,EAASC,KAAKC,UAAUd,GAE5B,OADepB,KAAKmC,WAAWH,GACfZ,EAAMpB,KAAKqB,iDAIlBe,GAET,IADA,IAAIhB,EAAQa,KAAKI,MAAMD,GACfb,EAAI,EAAGA,EAAIvB,KAAKJ,MAAM4B,MAAM,EAAGD,IACrC,IAAI,IAAIG,EAAI,EAAGA,EAAI1B,KAAKJ,MAAM+B,MAAOD,IAChCN,EAAMG,GAAGG,IACVY,EAAOf,EAAE,EAAEG,GAIjB,SAASY,EAAOf,EAAEG,GAChBa,EAAKhB,EAAEG,GACPa,EAAKhB,EAAE,EAAEG,GACTa,EAAKhB,EAAE,EAAEG,GACTa,EAAKhB,EAAEG,EAAE,GACTa,EAAKhB,EAAEG,EAAE,GAEX,SAASa,EAAKhB,EAAGG,GACXA,GAAK,GAAKA,EAAI,GAAKH,GAAK,GAAKA,EAAI,IACnCH,EAAMG,GAAGG,IAAMN,EAAMG,GAAGG,IAI5B,IADA,IAAMc,EAAmB,CAAC,EAAC,GAAK,GAAM,GAAM,GAAM,GAAM,EAAC,GAAM,GAAK,GAAM,GAAK,GAAO,EAAC,GAAK,GAAK,GAAK,GAAM,GAAO,EAAC,GAAM,GAAM,GAAK,GAAK,GAAM,EAAC,GAAK,GAAM,GAAK,GAAK,GAAO,EAAC,GAAM,GAAK,GAAK,GAAM,GAAM,EAAC,GAAK,GAAK,GAAM,GAAK,IACxNC,EAAI,EAAGA,EAAID,EAAiBE,OAAQD,IAC1C,OAAGrB,EAAM,GAAGuB,aAAeH,EAAiBC,GAAGE,mDAUnCC,GACdC,QAAQC,IAAI,WAAWF,GADF,IAAAG,EAEA/C,KAAKJ,MAArB+B,EAFgBoB,EAEhBpB,MAAOH,EAFSuB,EAETvB,MACRJ,EAAQpB,KAAKkB,MAAME,MAHF4B,EAIRJ,EAAMK,MAAM,KAAKC,IAAIC,QAJbC,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAkD,EAAA,GAIhBzB,EAJgB6B,EAAA,GAIb1B,EAJa0B,EAAA,GAOrB,SAASE,EAAS/B,EAAGG,GAGfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCJ,EAAMG,GAAGG,IAAMN,EAAMG,GAAGG,IAK5B4B,EAAS/B,EAAEG,GACX4B,EAAS/B,EAAE,EAAEG,GACb4B,EAAS/B,EAAE,EAAEG,GACb4B,EAAS/B,EAAEG,EAAE,GACb4B,EAAS/B,EAAEG,EAAE,GAGb,IAAIP,EAASC,EAAMmC,MAAM,SAAA9B,GAAG,OAAIA,EAAI8B,MAAM,SAAAC,GAAI,OAAKA,MACnDX,QAAQC,IAAI3B,GACZnB,KAAKyD,SAAS,CAACrC,QAAOD,+CAOtB,IAFU,IAAAuC,EAAA1D,KACN2D,EAAW,GACNpC,EAAI,EAAGA,EAAIvB,KAAKJ,MAAM4B,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GAD+BmC,EAAA,SAEhClC,GACP,IAAIkB,EAAK,GAAAiB,OAAMtC,EAAN,KAAAsC,OAAWnC,GACpBD,EAAIG,KACFjB,EAAAC,EAAAC,cAACiD,EAAD,CACEC,IAAKnB,EACLlC,MAAOgD,EAAKxC,MAAME,MAAMG,GAAGG,GAC3BlB,kBAAmB,kBAAMkD,EAAKM,gBAAgBpB,QAN3ClB,EAAI,EAAGA,EAAI1B,KAAKJ,MAAM+B,MAAOD,IAAKkC,EAAlClC,GAUTiC,EAAS/B,KAAKjB,EAAAC,EAAAC,cAAA,MAAIkD,IAAKxC,GAAIE,IAE7B,OACEd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aAAQ8C,sCAKZ3D,KAAKyD,SAAS,CAACrC,MAAOpB,KAAKqB,cAAeF,QAAQ,qCAGlD,OACER,EAAAC,EAAAC,cAAA,WACGb,KAAKkB,MAAMC,OACVR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,OACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,QACAH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAASf,KAAKsB,SAAtC,iBAGPX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,QAEDd,KAAKiE,qBA5IEjD,cAAdC,EAEGiD,aAAe,CACpB1C,MAAO,EACPG,MAAO,EACPI,oBAAqB,KA+IVd,QCjEAkD,gMA/EXC,SAASC,eAAe,SAASC,wDAGjCF,SAASC,eAAe,YAAYE,MAAMC,QAAQ,QAClDJ,SAASC,eAAe,YAAYC,kDAGpC,OACE3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAASf,KAAKyE,cAAtC,YACA9D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAASf,KAAK0E,cAAtC,aAEA/D,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAA,OAAK+D,GAAG,SACNjE,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yUAGAF,EAAAC,EAAAC,cAAA,2fAGAF,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAAA,OAAK+D,GAAG,YACNjE,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,+YAGGF,EAAAC,EAAAC,cAAA,SAAO+D,GAAG,kBACPjE,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,mBAGJF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAINF,EAAAC,EAAAC,cAAA,mJAxEIG,cCME6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAAShB,SAASC,eAAe,SDuH3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.096a8f66.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.restart = this.restart.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    let board2 = JSON.stringify(board);\n    let winnable = this.isSolvable(board2);\n    return winnable?board:this.createBoard();\n  }\n\n  //TODO: check if the board is winnable.\n  isSolvable(boardt) {\n    let board = JSON.parse(boardt);\n    for(let y = 0; y < this.props.nrows-1; y++){\n      for(let x = 0; x < this.props.ncols; x++){\n        if(board[y][x]){\n          toggle(y+1,x);\n        }\n      }\n    }\n    function toggle(y,x) {\n      flip(y,x);\n      flip(y+1,x);\n      flip(y-1,x);\n      flip(y,x+1);\n      flip(y,x-1);\n    }\n    function flip(y, x) {\n      if (x >= 0 && x < 5 && y >= 0 && y < 5) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    const possibleLastRows = [[true,false,false,false,true],[false,true,false,true,false],[true,true,true,false,false],[false,false,true,true,true],[true,false,true,true,false],[false,true,true,false,true],[true,true,false,true,true]];\n    for(let i = 0; i < possibleLastRows.length; i++) {\n      if(board[4].toString() === possibleLastRows[i].toString()){\n        return true;\n      }else{\n        return false;\n      }\n    }\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log('Flipping'+coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y,x);\n    flipCell(y-1,x);\n    flipCell(y+1,x);\n    flipCell(y,x-1);\n    flipCell(y,x+1);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n    console.log(hasWon);\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  restart() {\n    this.setState({board: this.createBoard(), hasWon: false});\n  }\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n            <div><button className='btn' onClick={this.restart}>Play Again?</button></div>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  showGamePlay() {\n    document.getElementById('rules').scrollIntoView();\n  }\n  showTutorial() {\n    document.getElementById('solution').style.display='block';\n    document.getElementById('solution').scrollIntoView();\n  }\n  render() {\n    return (\n      <div className='App'>\n        {/* <GameRules /> */}\n        <div className='App-Gameplay'>\n        <button className='btn' onClick={this.showGamePlay}>gameplay</button>\n        <button className='btn' onClick={this.showTutorial}>solution</button>\n        </div>\n        <Board />\n        <div id='rules'>\n          <h1>Gameplay</h1>\n          <hr/>\n          <p>\n            Lights Out is a puzzle game released by Tiger Electronics in 1995. The game consists of a 5 x 5 grid of lights that are either on or off. Pressing any light will toggle it and its adjacent lights (non-diagonal). The goal of the puzzle is to switch all the lights off, preferably in as few button presses as possible. \n          </p>\n          <p>\n            If a light is on, it must be toggled an odd number of times to be turned off. If a light is off, it must be toggled an even number of times (including none at all) for it to remain off. Several conclusions are used for the game's strategy. Firstly, the order in which the lights are pressed does not matter, as the result will be the same. Secondly, in a minimal solution, each light needs to be pressed no more than once, because pressing a light twice is equivalent to not pressing it at all.\n          </p>\n          <hr/>\n        </div>\n        <div id='solution'>\n          <h1>Solution</h1>\n          <hr />\n          <p>\n            For each light on row 1, press the cell beneath it on row 2 to turn the light off. This way row 1 is completely unlit. Repeat the above step for rows 2-4, so that now you only have lights on row 5. This is called \"chasing the lights\". Match your bottom row (i.e. row 5) with the table given below and lit the topmost row (i.e. row 1) cells as shown in the table. (1 -> lit | 0 -> Unlit)\n          </p>    \n             <table id='solution-table'>\n                <thead>\n                  <tr>\n                    <th>Bottom</th>\n                    <th>Top</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>1 0 0 0 1</td>\n                    <td>1 1 0 0 0</td>\n                  </tr>\n                  <tr>\n                    <td>0 1 0 1 0</td>\n                    <td>1 0 0 1 0</td>\n                  </tr>\n                  <tr>\n                    <td>1 1 1 0 0</td>\n                    <td>0 1 0 0 0</td>\n                  </tr>\n                  <tr>\n                    <td>0 0 1 1 1</td>\n                    <td>0 0 0 1 0</td>\n                  </tr>\n                  <tr>\n                    <td>1 0 1 1 0</td>\n                    <td>0 0 0 0 1</td>\n                  </tr>\n                  <tr>\n                    <td>0 1 1 0 1</td>\n                    <td>1 0 0 0 0</td>\n                  </tr>\n                  <tr>\n                    <td>1 1 0 1 1</td>\n                    <td>0 0 1 0 0</td>\n                  </tr>\n                </tbody>\n              </table>\n              <p>\n                Repeat \"chasing the lights\" down and it will be magically solved. Read about Gaussian Elimination for solving in fewer steps.\n              </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}